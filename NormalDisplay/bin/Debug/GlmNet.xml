<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlmNet</name>
    </assembly>
    <members>
        <member name="T:GlmNet.glm">
            <summary>
            The glm class contains static functions as exposed in the glm namespace of the 
            GLM library. The lowercase naming is to keep the code as consistent as possible
            with the real GLM.
            </summary>
        </member>
        <member name="M:GlmNet.glm.frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a frustrum projection matrix.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="nearVal">The near val.</param>
            <param name="farVal">The far val.</param>
            <returns></returns>
        </member>
        <member name="M:GlmNet.glm.infinitePerspective(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix for a symmetric perspective-view frustum with far plane at infinite.
            </summary>
            <param name="fovy">The fovy.</param>
            <param name="aspect">The aspect.</param>
            <param name="zNear">The z near.</param>
            <returns></returns>
        </member>
        <member name="M:GlmNet.glm.lookAt(GlmNet.vec3,GlmNet.vec3,GlmNet.vec3)">
            <summary>
            Build a look at view matrix.
            </summary>
            <param name="eye">The eye.</param>
            <param name="center">The center.</param>
            <param name="up">Up.</param>
            <returns></returns>
        </member>
        <member name="M:GlmNet.glm.ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix for an orthographic parallel viewing volume.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="zNear">The z near.</param>
            <param name="zFar">The z far.</param>
            <returns></returns>
        </member>
        <member name="M:GlmNet.glm.ortho(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix for projecting two-dimensional coordinates onto the screen.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <returns></returns>
        </member>
        <member name="M:GlmNet.glm.perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective transformation matrix.
            </summary>
            <param name="fovy">The field of view angle, in radians.</param>
            <param name="aspect">The aspect ratio.</param>
            <param name="zNear">The near depth clipping plane.</param>
            <param name="zFar">The far depth clipping plane.</param>
            <returns>A <see cref="T:GlmNet.mat4"/> that contains the projection matrix for the perspective transformation.</returns>
        </member>
        <member name="M:GlmNet.glm.perspectiveFov(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">The fov (in radians).</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="zNear">The z near.</param>
            <param name="zFar">The z far.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:GlmNet.glm.pickMatrix(GlmNet.vec2,GlmNet.vec2,GlmNet.vec4)">
            <summary>
            Define a picking region.
            </summary>
            <param name="center">The center.</param>
            <param name="delta">The delta.</param>
            <param name="viewport">The viewport.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:GlmNet.glm.project(GlmNet.vec3,GlmNet.mat4,GlmNet.mat4,GlmNet.vec4)">
            <summary>
            Map the specified object coordinates (obj.x, obj.y, obj.z) into window coordinates.
            </summary>
            <param name="obj">The object.</param>
            <param name="model">The model.</param>
            <param name="proj">The proj.</param>
            <param name="viewport">The viewport.</param>
            <returns></returns>
        </member>
        <member name="M:GlmNet.glm.rotate(GlmNet.mat4,System.Single,GlmNet.vec3)">
            <summary>
            Builds a rotation 4 * 4 matrix created from an axis vector and an angle.
            </summary>
            <param name="m">The m.</param>
            <param name="angle">The angle.</param>
            <param name="v">The v.</param>
            <returns></returns>
        </member>
        <member name="M:GlmNet.glm.scale(GlmNet.mat4,GlmNet.vec3)">
            <summary>
            Applies a scale transformation to matrix <paramref name="m"/> by vector <paramref name="v"/>.
            </summary>
            <param name="m">The matrix to transform.</param>
            <param name="v">The vector to scale by.</param>
            <returns><paramref name="m"/> scaled by <paramref name="v"/>.</returns>
        </member>
        <member name="M:GlmNet.glm.translate(GlmNet.mat4,GlmNet.vec3)">
            <summary>
            Applies a translation transformation to matrix <paramref name="m"/> by vector <paramref name="v"/>.
            </summary>
            <param name="m">The matrix to transform.</param>
            <param name="v">The vector to translate by.</param>
            <returns><paramref name="m"/> translated by <paramref name="v"/>.</returns>
        </member>
        <member name="M:GlmNet.glm.tweakedInfinitePerspective(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix for a symmetric perspective-view frustum with far plane 
            at infinite for graphics hardware that doesn't support depth clamping.
            </summary>
            <param name="fovy">The fovy.</param>
            <param name="aspect">The aspect.</param>
            <param name="zNear">The z near.</param>
            <returns></returns>
        </member>
        <member name="M:GlmNet.glm.unProject(GlmNet.vec3,GlmNet.mat4,GlmNet.mat4,GlmNet.vec4)">
            <summary>
            Map the specified window coordinates (win.x, win.y, win.z) into object coordinates.
            </summary>
            <param name="win">The win.</param>
            <param name="model">The model.</param>
            <param name="proj">The proj.</param>
            <param name="viewport">The viewport.</param>
            <returns></returns>
        </member>
        <member name="T:GlmNet.mat2">
            <summary>
            Represents a 2x2 matrix.
            </summary>
        </member>
        <member name="M:GlmNet.mat2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GlmNet.mat2"/> struct.
            This matrix is the identity matrix scaled by <paramref name="scale"/>.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:GlmNet.mat2.#ctor(GlmNet.vec2[])">
            <summary>
            Initializes a new instance of the <see cref="T:GlmNet.mat2"/> struct.
            The matrix is initialised with the <paramref name="cols"/>.
            </summary>
            <param name="cols">The colums of the matrix.</param>
        </member>
        <member name="M:GlmNet.mat2.identity">
            <summary>
            Creates an identity matrix.
            </summary>
            <returns>A new identity matrix.</returns>
        </member>
        <member name="M:GlmNet.mat2.to_array">
            <summary>
            Returns the matrix as a flat array of elements, column major.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlmNet.mat2.op_Multiply(GlmNet.mat2,GlmNet.vec2)">
            <summary>
            Multiplies the <paramref name="lhs"/> matrix by the <paramref name="rhs"/> vector.
            </summary>
            <param name="lhs">The LHS matrix.</param>
            <param name="rhs">The RHS vector.</param>
            <returns>The product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:GlmNet.mat2.op_Multiply(GlmNet.mat2,GlmNet.mat2)">
            <summary>
            Multiplies the <paramref name="lhs"/> matrix by the <paramref name="rhs"/> matrix.
            </summary>
            <param name="lhs">The LHS matrix.</param>
            <param name="rhs">The RHS matrix.</param>
            <returns>The product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:GlmNet.mat2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            The Difference is detected by the different values
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GlmNet.mat2.op_Equality(GlmNet.mat2,GlmNet.mat2)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.mat2.op_Inequality(GlmNet.mat2,GlmNet.mat2)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.mat2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="F:GlmNet.mat2.cols">
            <summary>
            The columms of the matrix.
            </summary>
        </member>
        <member name="P:GlmNet.mat2.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:GlmNet.vec2"/> column at the specified index.
            </summary>
            <value>
            The <see cref="T:GlmNet.vec2"/> column.
            </value>
            <param name="column">The column index.</param>
            <returns>The column at index <paramref name="column"/>.</returns>
        </member>
        <member name="P:GlmNet.mat2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at <paramref name="column"/> and <paramref name="row"/>.
            </summary>
            <value>
            The element at <paramref name="column"/> and <paramref name="row"/>.
            </value>
            <param name="column">The column index.</param>
            <param name="row">The row index.</param>
            <returns>
            The element at <paramref name="column"/> and <paramref name="row"/>.
            </returns>
        </member>
        <member name="T:GlmNet.mat3">
            <summary>
            Represents a 3x3 matrix.
            </summary>
        </member>
        <member name="M:GlmNet.mat3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GlmNet.mat3"/> struct.
            This matrix is the identity matrix scaled by <paramref name="scale"/>.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:GlmNet.mat3.#ctor(GlmNet.vec3[])">
            <summary>
            Initializes a new instance of the <see cref="T:GlmNet.mat3"/> struct.
            The matrix is initialised with the <paramref name="cols"/>.
            </summary>
            <param name="cols">The colums of the matrix.</param>
        </member>
        <member name="M:GlmNet.mat3.identity">
            <summary>
            Creates an identity matrix.
            </summary>
            <returns>A new identity matrix.</returns>
        </member>
        <member name="M:GlmNet.mat3.to_array">
            <summary>
            Returns the matrix as a flat array of elements, column major.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlmNet.mat3.to_mat2">
            <summary>
            Returns the <see cref="T:GlmNet.mat3"/> portion of this matrix.
            </summary>
            <returns>The <see cref="T:GlmNet.mat3"/> portion of this matrix.</returns>
        </member>
        <member name="M:GlmNet.mat3.op_Multiply(GlmNet.mat3,GlmNet.vec3)">
            <summary>
            Multiplies the <paramref name="lhs"/> matrix by the <paramref name="rhs"/> vector.
            </summary>
            <param name="lhs">The LHS matrix.</param>
            <param name="rhs">The RHS vector.</param>
            <returns>The product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:GlmNet.mat3.op_Multiply(GlmNet.mat3,GlmNet.mat3)">
            <summary>
            Multiplies the <paramref name="lhs"/> matrix by the <paramref name="rhs"/> matrix.
            </summary>
            <param name="lhs">The LHS matrix.</param>
            <param name="rhs">The RHS matrix.</param>
            <returns>The product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:GlmNet.mat3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            The Difference is detected by the different values
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GlmNet.mat3.op_Equality(GlmNet.mat3,GlmNet.mat3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.mat3.op_Inequality(GlmNet.mat3,GlmNet.mat3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.mat3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="F:GlmNet.mat3.cols">
            <summary>
            The columms of the matrix.
            </summary>
        </member>
        <member name="P:GlmNet.mat3.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:GlmNet.vec3"/> column at the specified index.
            </summary>
            <value>
            The <see cref="T:GlmNet.vec3"/> column.
            </value>
            <param name="column">The column index.</param>
            <returns>The column at index <paramref name="column"/>.</returns>
        </member>
        <member name="P:GlmNet.mat3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at <paramref name="column"/> and <paramref name="row"/>.
            </summary>
            <value>
            The element at <paramref name="column"/> and <paramref name="row"/>.
            </value>
            <param name="column">The column index.</param>
            <param name="row">The row index.</param>
            <returns>
            The element at <paramref name="column"/> and <paramref name="row"/>.
            </returns>
        </member>
        <member name="T:GlmNet.vec3">
            <summary>
            Represents a three dimensional vector.
            </summary>
        </member>
        <member name="M:GlmNet.vec3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            The Difference is detected by the different values
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GlmNet.vec3.op_Equality(GlmNet.vec3,GlmNet.vec3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The first Vector.</param>
            <param name="v2">The second Vector.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.vec3.op_Inequality(GlmNet.vec3,GlmNet.vec3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The first Vector.</param>
            <param name="v2">The second Vector.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.vec3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:GlmNet.vec4">
            <summary>
            Represents a four dimensional vector.
            </summary>
        </member>
        <member name="M:GlmNet.vec4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            The Difference is detected by the different values
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GlmNet.vec4.op_Equality(GlmNet.vec4,GlmNet.vec4)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The first Vector.</param>
            <param name="v2">The second Vector.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.vec4.op_Inequality(GlmNet.vec4,GlmNet.vec4)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The first Vector.</param>
            <param name="v2">The second Vector.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.vec4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:GlmNet.mat4">
            <summary>
            Represents a 4x4 matrix.
            </summary>
        </member>
        <member name="M:GlmNet.mat4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GlmNet.mat4"/> struct.
            This matrix is the identity matrix scaled by <paramref name="scale"/>.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:GlmNet.mat4.#ctor(GlmNet.vec4[])">
            <summary>
            Initializes a new instance of the <see cref="T:GlmNet.mat4"/> struct.
            The matrix is initialised with the <paramref name="cols"/>.
            </summary>
            <param name="cols">The colums of the matrix.</param>
        </member>
        <member name="M:GlmNet.mat4.identity">
            <summary>
            Creates an identity matrix.
            </summary>
            <returns>A new identity matrix.</returns>
        </member>
        <member name="M:GlmNet.mat4.to_array">
            <summary>
            Returns the matrix as a flat array of elements, column major.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlmNet.mat4.to_mat3">
            <summary>
            Returns the <see cref="T:GlmNet.mat3"/> portion of this matrix.
            </summary>
            <returns>The <see cref="T:GlmNet.mat3"/> portion of this matrix.</returns>
        </member>
        <member name="M:GlmNet.mat4.op_Multiply(GlmNet.mat4,GlmNet.vec4)">
            <summary>
            Multiplies the <paramref name="lhs"/> matrix by the <paramref name="rhs"/> vector.
            </summary>
            <param name="lhs">The LHS matrix.</param>
            <param name="rhs">The RHS vector.</param>
            <returns>The product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:GlmNet.mat4.op_Multiply(GlmNet.mat4,GlmNet.mat4)">
            <summary>
            Multiplies the <paramref name="lhs"/> matrix by the <paramref name="rhs"/> matrix.
            </summary>
            <param name="lhs">The LHS matrix.</param>
            <param name="rhs">The RHS matrix.</param>
            <returns>The product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:GlmNet.mat4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            The Difference is detected by the different values
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GlmNet.mat4.op_Equality(GlmNet.mat4,GlmNet.mat4)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.mat4.op_Inequality(GlmNet.mat4,GlmNet.mat4)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="m1">The first Matrix.</param>
            <param name="m2">The second Matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.mat4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="F:GlmNet.mat4.cols">
            <summary>
            The columms of the matrix.
            </summary>
        </member>
        <member name="P:GlmNet.mat4.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:GlmNet.vec4"/> column at the specified index.
            </summary>
            <value>
            The <see cref="T:GlmNet.vec4"/> column.
            </value>
            <param name="column">The column index.</param>
            <returns>The column at index <paramref name="column"/>.</returns>
        </member>
        <member name="P:GlmNet.mat4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at <paramref name="column"/> and <paramref name="row"/>.
            </summary>
            <value>
            The element at <paramref name="column"/> and <paramref name="row"/>.
            </value>
            <param name="column">The column index.</param>
            <param name="row">The row index.</param>
            <returns>
            The element at <paramref name="column"/> and <paramref name="row"/>.
            </returns>
        </member>
        <member name="T:GlmNet.vec2">
            <summary>
            Represents a two dimensional vector.
            </summary>
        </member>
        <member name="M:GlmNet.vec2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            The Difference is detected by the different values
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GlmNet.vec2.op_Equality(GlmNet.vec2,GlmNet.vec2)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The first Vector.</param>
            <param name="v2">The second Vector.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.vec2.op_Inequality(GlmNet.vec2,GlmNet.vec2)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The first Vector.</param>
            <param name="v2">The second Vector.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GlmNet.vec2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
    </members>
</doc>
